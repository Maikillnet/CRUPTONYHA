# parser_altseason.py
# -*- coding: utf-8 -*-
from __future__ import annotations

import re
import datetime as dt
from io import BytesIO
from typing import Dict, Optional, Tuple, List

import requests
from bs4 import BeautifulSoup, Tag
from PIL import Image, ImageDraw, ImageFont

# --------- –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–ø—Ä–æ–±—É–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏) ---------
ALTSEASON_URLS = [
    "https://www.blockchaincenter.net/en/altcoin-season-index/",
    "https://www.blockchaincenter.net/ru/altcoin-season-index/",
    "https://www.blockchaincenter.net/altcoin-season-index/",
]

HEADERS = {
    "User-Agent": (
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
        "(KHTML, like Gecko) Chrome/124.0 Safari/537.36"
    )
}
TIMEOUT = 12

# ======================== –±–∞–∑–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã ========================
def _fetch_html(url: str) -> str:
    r = requests.get(url, headers=HEADERS, timeout=TIMEOUT)
    r.raise_for_status()
    return r.text

def _find_numbers_0_100(text: str) -> List[Tuple[int, int]]:
    """–í–µ—Ä–Ω—ë—Ç –≤—Å–µ —á–∏—Å–ª–∞ 0..100 –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ."""
    nums: List[Tuple[int, int]] = []
    for m in re.finditer(r"(?<!\d)(\d{1,3})(?!\d)", text):
        try:
            v = int(m.group(1))
        except ValueError:
            continue
        if 0 <= v <= 100:
            nums.append((v, m.start()))
    return nums

def _extract_index_heuristic(html: str) -> int:
    """
    –†–æ–±–∞—Å—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞:
      1) –ø—Ä—è–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã 'Altcoin Season Index: 55' / '–ò–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–∞ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ ... 55'
      2) —á–∏—Å–ª–æ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ —è–∫–æ—Ä—è–º 'current/–°–µ–π—á–∞—Å'
      3) —Ñ–æ–ª–±—ç–∫ ‚Äî —Ä–∞–∑—É–º–Ω—ã–µ —á–∏—Å–ª–∞ 30..90 (–Ω–µ 25/75)
    """
    soup = BeautifulSoup(html, "html.parser")
    text = soup.get_text("\n", strip=True)

    m = re.search(r"(Altcoin\s+Season\s+Index|–ò–Ω–¥–µ–∫—Å\s+—Å–µ–∑–æ–Ω–∞\s+–∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤)[^\d]{0,40}(\d{1,3})", text, re.I)
    if m:
        v = int(m.group(2))
        if 0 <= v <= 100:
            return v

    anchors = []
    for kw in ["–°–µ–π—á–∞—Å", "—Ç–µ–∫—É—â", "current", "Now", "Altcoin Season Index", "–ò–Ω–¥–µ–∫—Å —Å–µ–∑–æ–Ω–∞ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤"]:
        for a in re.finditer(kw, text, flags=re.I):
            anchors.append(a.start())

    nums = _find_numbers_0_100(text)
    if not nums:
        raise ValueError("–ù–µ –Ω–∞—à–ª–∏ —á–∏—Å–µ–ª 0‚Äì100 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

    if anchors:
        def dist(npos: int) -> int:
            return min(abs(npos - a) for a in anchors)

        # –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ –ª–∏–Ω–∏–∏-–ø–æ—Ä–æ–≥–∏
        filtered = [(v, pos) for (v, pos) in nums if v not in (0, 25, 75, 100)]
        pick = min(filtered or nums, key=lambda t: dist(t[1]))
        return pick[0]

    for v, _ in nums:
        if 30 <= v <= 90 and v not in (25, 75):
            return v
    return nums[0][0]

# ======================== –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–∏–Ω–¥–µ–∫—Å) ========================
def fetch_altseason_index() -> Tuple[int, str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (index, used_url).
    –ë—Ä–æ—Å–∞–µ—Ç ValueError —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.
    """
    last_error: Optional[str] = None
    for url in ALTSEASON_URLS:
        try:
            html = _fetch_html(url)
            value = _extract_index_heuristic(html)
            return value, url
        except Exception as e:
            last_error = str(e)
            continue
    raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω–¥–µ–∫—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {last_error or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}")

def classify_altseason(value: int) -> Tuple[str, str]:
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞:
      ‚â§25  ‚Üí ¬´–°–µ–∑–æ–Ω –±–∏—Ç–∫–æ–∏–Ω–∞¬ª
      26‚Äì68 ‚Üí ¬´–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ¬ª
      69‚Äì74 ‚Üí ¬´–ë–ª–∏–∑–∫–æ –∫ –∞–ª—å—Ç—Å–µ–∑–æ–Ω—É¬ª
      ‚â•75  ‚Üí ¬´–ê–ª—å—Ç—Å–µ–∑–æ–Ω¬ª
    """
    if value <= 25:
        return "üîµ –°–µ–∑–æ–Ω –±–∏—Ç–∫–æ–∏–Ω–∞", "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∑–∞ BTC-–ø–∞—Ä–∞–º–∏."
    if value >= 75:
        return "üü¢ –ê–ª—å—Ç—Å–µ–∑–æ–Ω", "–ê–ª—å—Ç—ã —á–∞—Å—Ç–æ –æ–±–≥–æ–Ω—è—é—Ç BTC. –†–∏—Å–∫–∏ –≤—ã—à–µ."
    if value >= 69:
        return "üü° –ë–ª–∏–∑–∫–æ –∫ –∞–ª—å—Ç—Å–µ–∑–æ–Ω—É", "–°–ª–µ–¥–∏–º: >69 ‚Äî —Ä–∞–∑–º–æ—Ä–æ–∑–∫–∞ –∞–ª—å—Ç–æ–≤, >75 ‚Äî –≥–æ—Ä—è—á–∞—è —Ñ–∞–∑–∞."
    return "‚ö™Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞", "–Ø–≤–Ω–æ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–µ—Ç."

def format_altseason_status(value: int) -> str:
    label, tip = classify_altseason(value)
    return (
        f"<b>–ò–Ω–¥–µ–∫—Å –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞</b>: <b>{value}</b>/100\n"
        f"–°—Ç–∞—Ç—É—Å: {label}\n"
        f"–ü–æ—Ä–æ–≥–∏: 25 (BTC-season) ¬∑ 69 (–±–ª–∏–∑–∫–æ) ¬∑ 75 (–∞–ª—å—Ç—Å–µ–∑–æ–Ω)\n"
        f"{tip}"
    )

def format_altseason_text(value: int, src_url: str) -> str:
    ts = dt.datetime.now().strftime("%Y-%m-%d %H:%M")
    return f"{format_altseason_status(value)}\n\n<i>–ò—Å—Ç–æ—á–Ω–∏–∫</i>: {src_url}\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ</i>: {ts} –ú–°–ö"

# ======================== —Å–≤–æ–¥–∫–∞ –∏–∑ –ø—Ä–∞–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã ========================
def _normalize(s: str) -> str:
    return re.sub(r"\s+", " ", (s or "").strip().lower())

def _parse_int(s: str) -> Optional[int]:
    if s is None:
        return None
    s = s.strip()
    if not s or s.lower() in {"none", "n/a", "-", "‚Äî"}:
        return None
    try:
        return int(re.sub(r"[^\d-]", "", s))
    except Exception:
        return None

# –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–∏ RU, –∏ EN) –¥–ª—è ¬´—Ñ—É–∑–∑–∏¬ª-—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
_KEYWORDS = {
    "days_since_last": [["days", "since", "last"], ["–¥–Ω–µ–π", "–ø—Ä–æ—à–ª–æ–≥–æ"]],
    "avg_between": [["average", "between"], ["—Å—Ä–µ–¥–Ω", "–º–µ–∂–¥—É"]],
    "longest_without": [["longest", "without"], ["—Å–∞–º–∞—è", "–¥–ª–∏–Ω", "–±–µ–∑"]],
    "avg_length": [["average", "length"], ["—Å—Ä–µ–¥–Ω", "–¥–ª–∏—Ç–µ–ª—å"]],
    "longest_length": [["longest", "season"], ["—Å–∞–º—ã–π", "–¥–ª–∏–Ω", "—Å–µ–∑–æ–Ω"]],
    "total_days": [["total", "number", "days"], ["–æ–±—â–µ–µ", "–∫–æ–ª–∏—á", "–¥–Ω–µ–π"]],
}

# ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–µ—Ç–æ–∫ (—Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ RU/EN)
_LABEL_VARIANTS = {
    "days_since_last": [
        "days since last season",
        "–¥–Ω–µ–π —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–∑–æ–Ω–∞",
    ],
    "avg_between": [
        "average days between seasons",
        "—Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É —Å–µ–∑–æ–Ω–∞–º–∏",
    ],
    "longest_without": [
        "longest period without a season",
        "—Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è –±–µ–∑ —Å–µ–∑–æ–Ω–∞",
    ],
    "avg_length": [
        "average season length (days)",
        "average length of season (days)",   # –∏–Ω–æ–≥–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ç–∞–∫–∞—è —Ñ–æ—Ä–º–∞
        "—Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–∞ (–¥–Ω–µ–π)",
        "—Å—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–∞ (–¥–Ω–µ–π)",
    ],
    "longest_length": [
        "longest season (days)",
        "—Å–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Å–µ–∑–æ–Ω (–¥–Ω–∏)",
    ],
    "total_days": [
        "total number of days in season",
        "total days of season",
        "–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å–µ–∑–æ–Ω–∞",
    ],
}

def _match_key(label_norm: str) -> Optional[str]:
    # 1) —Ç–æ—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    for key, variants in _LABEL_VARIANTS.items():
        for v in variants:
            if _normalize(v) in label_norm:
                return key
    # 2) —Ñ—É–∑–∑–∏: –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–≤—Å–µ –¥–æ–ª–∂–Ω—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è)
    for key, bundles in _KEYWORDS.items():
        for kws in bundles:
            if all(kw in label_norm for kw in kws):
                return key
    return None

def fetch_altseason_stats(timeout: int = 12) -> Dict[str, Dict[str, Optional[int]]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¢–û–õ–¨–ö–û –∏–∑ –±–ª–æ–∫–∞ 'Altcoin Season':
      {
        "days_since_last": {"alt": 259, "btc": 47},
        "avg_between": {"alt": 66, "btc": 17},
        "longest_without": {"alt": 486, "btc": 191},
        "avg_length": {"alt": 18, "btc": 10},
        "longest_length": {"alt": 117, "btc": 126},
        "total_days": {"alt": 404, "btc": 953},
      }
    """
    last_err = None
    html = None
    for url in ALTSEASON_URLS:
        try:
            r = requests.get(url, headers=HEADERS, timeout=timeout)
            r.raise_for_status()
            html = r.text
            break
        except Exception as e:
            last_err = e
    if html is None:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: {last_err}")

    soup = BeautifulSoup(html, "html.parser")

    # ---------- 1) –Ω–∞–π–¥—ë–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "Altcoin Season Index" –∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–∞–±–ª–∏—Ü—É Altcoin/Bitcoin ----------
    hdr = soup.find(string=re.compile(r"(Altcoin\s+Season\s+Index|–ò–Ω–¥–µ–∫—Å\s+—Å–µ–∑–æ–Ω–∞\s+–∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤)", re.I))
    target_table: Optional[Tag] = None
    if hdr:
        node = hdr.parent
        for _ in range(200):
            node = node.find_next()
            if node is None:
                break
            if node.name == "table":
                first = node.find("tr")
                if first:
                    cols = [c.get_text(" ", strip=True) for c in first.find_all(["th", "td"])]
                    if len(cols) == 3:
                        h2, h3 = _normalize(cols[1]), _normalize(cols[2])
                        if ("altcoin" in h2 and "bitcoin" in h3) or ("–∞–ª—å—Ç" in h2 and "–±–∏—Ç–∫–æ–∏–Ω" in h3):
                            target_table = node
                            break

    # ---------- 2) —Ñ–æ–ª–±—ç–∫: –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Ñ–æ—Ä–º–∞—Ç–∞ [label | Altcoin | Bitcoin] ----------
    if target_table is None:
        for tbl in soup.find_all("table"):
            first = tbl.find("tr")
            if not first:
                continue
            cols = [c.get_text(" ", strip=True) for c in first.find_all(["th", "td"])]
            if len(cols) != 3:
                continue
            h2, h3 = _normalize(cols[1]), _normalize(cols[2])
            if ("altcoin" in h2 and "bitcoin" in h3) or ("–∞–ª—å—Ç" in h2 and "–±–∏—Ç–∫–æ–∏–Ω" in h3):
                target_table = tbl
                break

    if target_table is None:
        raise RuntimeError("–¢–∞–±–ª–∏—Ü–∞ Altcoin/Bitcoin –¥–ª—è —Å–µ–∫—Ü–∏–∏ 'Altcoin Season' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # ---------- 3) –ø–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫–∏ ----------
    stats: Dict[str, Dict[str, Optional[int]]] = {}
    for tr in target_table.find_all("tr")[1:]:
        tds = tr.find_all(["td", "th"])
        if len(tds) != 3:
            continue
        label = _normalize(tds[0].get_text(" ", strip=True))
        alt_v = _parse_int(tds[1].get_text(" ", strip=True))
        btc_v = _parse_int(tds[2].get_text(" ", strip=True))

        key = _match_key(label)
        if key:
            stats[key] = {"alt": alt_v, "btc": btc_v}

    # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å—ë –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏
    required = {"days_since_last", "avg_between", "longest_without", "avg_length", "longest_length", "total_days"}
    missing = [k for k in sorted(required) if k not in stats]
    if missing:
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: " + ", ".join(missing))

    return stats

def format_altseason_stats(stats: Dict[str, Dict[str, Optional[int]]]) -> str:
    """–§–æ—Ä–º–∞—Ç —Å–≤–æ–¥–∫–∏ –¥–ª—è Telegram."""
    def g(k):
        v = stats.get(k, {})
        return v.get("alt"), v.get("btc")

    d1a, d1b = g("days_since_last")
    d2a, d2b = g("avg_between")
    d3a, d3b = g("longest_without")
    d4a, d4b = g("avg_length")
    d5a, d5b = g("longest_length")
    d6a, d6b = g("total_days")

    lines = [
        "<b>üìä –°–≤–æ–¥–∫–∞ –ø–æ —Å–µ–∑–æ–Ω–∞–º</b>",
        f"‚Ä¢ –î–Ω–µ–π —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–µ–∑–æ–Ω–∞: <b>{d1a}</b> (–∞–ª—å—Ç—ã) | <b>{d1b}</b> (BTC)",
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –¥–Ω–µ–π –º–µ–∂–¥—É —Å–µ–∑–æ–Ω–∞–º–∏: <b>{d2a}</b> | <b>{d2b}</b>",
        f"‚Ä¢ –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è –±–µ–∑ —Å–µ–∑–æ–Ω–∞: <b>{d3a}</b> | <b>{d3b}</b>",
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–∞ (–¥–Ω–∏): <b>{d4a}</b> | <b>{d4b}</b>",
        f"‚Ä¢ –°–∞–º—ã–π –¥–ª–∏–Ω–Ω—ã–π —Å–µ–∑–æ–Ω (–¥–Ω–∏): <b>{d5a}</b> | <b>{d5b}</b>",
        f"‚Ä¢ –í—Å–µ–≥–æ –¥–Ω–µ–π —Å–µ–∑–æ–Ω–∞: <b>{d6a}</b> | <b>{d6b}</b>",
        "",
        "‚ÑπÔ∏è –ü–æ—Ä–æ–≥ –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞: <b>69+</b>. –ë–∏—Ç–∫–æ–∏–Ω-—Å–µ–∑–æ–Ω: <b>‚â§25</b>.",
    ]
    return "\n".join(lines)

# ======================== –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ PNG-–∫–∞—Ä—Ç–æ—á–∫–∏ ========================
def _try_font(size: int):
    """–ü—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π."""
    for name in ["arial.ttf", "DejaVuSans.ttf"]:
        try:
            return ImageFont.truetype(name, size)
        except Exception:
            pass
    return ImageFont.load_default()

def _text_size(drw: ImageDraw.ImageDraw, text: str, font) -> tuple[int, int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É/–≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Pillow."""
    try:
        l, t, r, b = drw.textbbox((0, 0), text, font=font)
        return (r - l), (b - t)
    except Exception:
        return drw.textsize(text, font=font)

def render_altseason_card(value: int, width: int = 900, height: int = 220) -> Tuple[bytes, str]:
    """
    –†–∏—Å—É–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é —à–∫–∞–ª—É 0..100 —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ 25/69/75 –∏ —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (png_bytes, filename).
    """
    pad = 20
    bar_h = 36
    img = Image.new("RGB", (width, height), (18, 18, 22))
    drw = ImageDraw.Draw(img)

    f_title = _try_font(28)
    f_val = _try_font(46)
    f_small = _try_font(18)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    drw.text((pad, pad), "–ò–Ω–¥–µ–∫—Å –∞–ª—å—Ç—Å–µ–∑–æ–Ω–∞", fill=(230, 230, 240), font=f_title)

    # –®–∫–∞–ª–∞
    bar_left = pad
    bar_right = width - pad
    bar_top = pad + 52
    bar_bottom = bar_top + bar_h

    # –ì—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ –∑–æ–Ω–∞–º
    def lerp(a, b, t): return int(a + (b - a) * t)

    for x in range(bar_left, bar_right):
        t = (x - bar_left) / (bar_right - bar_left)
        if t <= 0.25:  # –æ—Ä–∞–Ω–∂
            col = (lerp(255, 255, t / .25), lerp(140, 200, t / .25), 0)
        elif t <= 0.69:  # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è
            tt = (t - .25) / .44
            col = (lerp(220, 140, tt), lerp(220, 230, tt), lerp(220, 240, tt))
        else:  # –∑–µ–ª—ë–Ω–∞—è
            tt = (t - .69) / .31
            col = (lerp(140, 0, tt), lerp(230, 200, tt), lerp(140, 60, tt))
        drw.line([(x, bar_top), (x, bar_bottom)], fill=col)

    # –û—Ç–º–µ—Ç–∫–∏ 25 / 69 / 75
    def mark(xpos: int, text: str):
        drw.line([(xpos, bar_top - 6), (xpos, bar_bottom + 6)], fill=(240, 240, 240), width=2)
        tw, th = _text_size(drw, text, f_small)
        drw.text((xpos - tw // 2, bar_bottom + 10), text, fill=(210, 210, 220), font=f_small)

    for p, t in [(25, "25"), (69, "69"), (75, "75")]:
        x = int(bar_left + (bar_right - bar_left) * (p / 100.0))
        mark(x, t)

    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    v = max(0, min(100, int(value)))
    vx = int(bar_left + (bar_right - bar_left) * (v / 100.0))
    drw.rectangle([(vx - 2, bar_top - 10), (vx + 2, bar_bottom + 10)], fill=(255, 255, 255))
    label, tip = classify_altseason(v)

    # –ü–æ–¥–ø–∏—Å–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ
    drw.text((pad, bar_bottom + 54), f"–°—Ç–∞—Ç—É—Å: {label}", fill=(230, 230, 240), font=f_small)
    drw.text((pad, bar_top - 48), "0", fill=(180, 180, 190), font=f_small)
    drw.text((bar_right - 14, bar_top - 48), "100", fill=(180, 180, 190), font=f_small)

    val_text = f"{v}"
    vt_w, vt_h = _text_size(drw, val_text, f_val)
    drw.text((bar_right - vt_w, pad + 2), val_text, fill=(255, 255, 255), font=f_val)
    drw.text((pad, bar_bottom + 82), tip, fill=(190, 190, 200), font=f_small)

    bio = BytesIO()
    img.save(bio, format="PNG", optimize=True)
    return bio.getvalue(), f"altseason_{v}.png"

__all__ = [
    "fetch_altseason_index",
    "classify_altseason",
    "format_altseason_status",
    "format_altseason_text",
    "fetch_altseason_stats",
    "format_altseason_stats",
    "render_altseason_card",
]
